name: Build Rust CLI Binaries

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: fn-linux-x86_64
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: fn-linux-aarch64
            cross: true
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: fn-macos-x86_64
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            name: fn-macos-aarch64
            cross: false
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: fn-windows-x86_64
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: fn-windows-aarch64
            cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        workspaces: rust-cli

    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.cross && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        
        # Add ARM64 architecture and install OpenSSL for cross-compilation
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y libssl-dev:arm64 pkg-config-aarch64-linux-gnu
        
        # Set up cross-compilation environment variables
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "PKG_CONFIG_aarch64_unknown_linux_gnu=aarch64-linux-gnu-pkg-config" >> $GITHUB_ENV
        echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV

    - name: Build binary
      working-directory: rust-cli
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: rust-cli
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/fn
        else
          strip target/${{ matrix.target }}/release/fn
        fi

    - name: Strip binary (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: rust-cli
      run: |
        strip target/${{ matrix.target }}/release/fn

    - name: Create archive
      working-directory: rust-cli
      shell: bash
      run: |
        mkdir -p dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/fn.exe dist/${{ matrix.name }}.exe
          cd dist && tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}.exe
        else
          cp target/${{ matrix.target }}/release/fn dist/${{ matrix.name }}
          cd dist && tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: rust-cli/dist/${{ matrix.name }}.tar.gz
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*/*.tar.gz
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 